# -*- coding: utf-8 -*-
"""bi_practical_5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ri73yfkLdO3u3_SQEwO1t8ZcVT4ONeCC
"""

# Import libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.preprocessing import LabelEncoder

import seaborn as sns
import matplotlib.pyplot as plt

# Step 1: Load Data
df = pd.read_csv('/content/bank.csv')

# Step 2: Data Preprocessing
# Encoding categorical features using LabelEncoder
label_encoder = LabelEncoder()

# List of categorical columns
categorical_columns = ['job', 'marital', 'education', 'default', 'housing', 'loan', 'contact', 'month', 'poutcome', 'deposit']

# Apply LabelEncoder to each categorical column
for column in categorical_columns:
    df[column] = label_encoder.fit_transform(df[column])

# Step 3: Define Features and Target
X = df.drop('deposit', axis=1)  # Features (drop target column)
y = df['deposit']  # Target column --> The target column must be something that you want to predict

# Step 4: Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# test_size=0.2 means that 20% of the data will be used for testing, and the remaining 80% will be used for training.
# random_state=42 ensures that the split will always be the same whenever you run the code, and you get a consistent training and test set.

# Step 5: Model Training using Random Forest Classifier
model = RandomForestClassifier(n_estimators=100, random_state=42)  # n_estimators=100 means 100 decision trees.
model.fit(X_train, y_train)

# Step 6: Predictions
y_pred = model.predict(X_test)

# Step 7: Model Evaluation
print("Confusion Matrix:")
# print(confusion_matrix(y_test, y_pred))
plt.figure(figsize=(6, 4))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='YlGnBu')
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

print("\nClassification Report:")
print(classification_report(y_test, y_pred))